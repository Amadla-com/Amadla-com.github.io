Secrets Management
==================

There are multiple ways to manage secrets in Amadla CLI. You can use environment variables, Vault or a combination of both.

Environment variables
---------------------

Using the prefix ``AMADLA_SECRET_`` when naming your environment variable Amadla CLI will automatically pick it up and use it as a secret.

If you use a environment variable and Vault at the same time, the environment variable will take precedence but for the other secrets they will come from Vault.

Using ``.env`` files
--------------------

Same as with environment variables, you can use the prefix ``AMADLA_SECRET_`` when naming your environment variable in the ``.env`` file.

.. note::

    That file is not encrypted so make sure you don't commit it to a public repository. It is already in the ``.gitignore`` file so it won't be committed by default.

.. note::

    It is also used for other environment variables.

Using Vault
-----------

Vault is accessible via the CLI, Rest API and UI.

.. note::

    Vault uses a path to store secrets. By default Amadla CLI use this template path ``amadla/{{ module_type }}/{{ module_name }}/{{ section_name }}/{{ profile_name }}``.

    * ``amadla`` - it is not a variable, is a constant to group all the secrets for Amadla CLI.
    * ``module_type`` - they are three types of modules: ``clouds``, ``servers`` and ``apps`` (to follow this template you must use one of these three).
    * ``module_name`` - the name of the module (e.g.: ``aws`` could be one for the cloud).
    * ``section_name`` - what secret is being stored.
    * ``profile_name`` - the nameof the profile could be anything but in practice: dev, staging, prod, etc.

    If you want to change it, you can use the environment variable ``AMADLA_VAULT_SECRET_PATH_TEMPLATE``. It uses the Jinja2 template engine so you can use any of the variables above.

CLI
~~~

.. tip::

    If you are using the Vault container you can use the command:

    .. code:: bash

          podman exec -it vault /bin/bash

Listing secrets
^^^^^^^^^^^^^^^

.. code:: bash

    amadla secrets list --module-type clouds --module-name aws --profile-name dev

.. code:: bash

    vault kv list amadla/clouds/aws/dev

Adding a secret
^^^^^^^^^^^^^^^

.. code:: bash

    vault kv put amadla/clouds/aws/dev <key>=<value>

Removing a secret
^^^^^^^^^^^^^^^^^

.. code:: bash

    vault kv delete amadla/clouds/aws/dev/<key>

Modifying a secret
^^^^^^^^^^^^^^^^^^

.. code:: bash

    vault kv put amadla/clouds/aws/dev <key>=<value>

Rest API
~~~~~~~~

The examples use CURL but you can use any other tool like `Postman <https://www.postman.com/>`_.

.. important::

    Make sur that it is not accessible from the outside world.

Listing secrets
^^^^^^^^^^^^^^^

.. code:: bash

    curl -X GET -H "X-Vault-Token: <token>" http://127.0.0.1:8200/v1/amadla/clouds/aws/dev

Adding a secret
^^^^^^^^^^^^^^^

.. code:: bash

    curl -X POST -H "X-Vault-Token: <token>" -d '{"<key>": "<value>"}' http://127.0.0.1:8200/v1/amadla/clouds/aws/dev

Removing a secret
^^^^^^^^^^^^^^^^^

.. code:: bash

    curl -X DELETE -H "X-Vault-Token: <token>" http://127.0.0.1:8200/v1/amadla/clouds/aws/dev/<key>

Modifying a secret
^^^^^^^^^^^^^^^^^^

.. code:: bash

    curl -X POST -H "X-Vault-Token: <token>" -d '{"<key>": "<value>"}' http://127.0.0.1:8200/v1/amadla/clouds/aws/dev

UI
~~

.. important::

    Make sur that it is not accessible from the outside world.

Listing secrets
^^^^^^^^^^^^^^^

Adding a secret
^^^^^^^^^^^^^^^

Removing a secret
^^^^^^^^^^^^^^^^^

Modifying a secret
^^^^^^^^^^^^^^^^^^

